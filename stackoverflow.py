import matplotlib.font_manager as font_manager
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import statistics

class Dataset:
    
    def __init__(self, file_name='./data/survey_results_public.csv'):
        """
        Object initialization for data management. It takes one argument, which is the file name with a default value from the Stack Overflow dataset. This can be changed if you have a different file name.
        """
        self.file_name = file_name
    
    def load_data(self, is_indonesia=True):
        """
        A method to make a DataFrame from Stack Overflow data. It takes one argument, which if set True, it will return the data for Indonesian respondents. Otherwise, it will return non-Indonesian respondents.
        """
        df = pd.read_csv(self.file_name)
        if is_indonesia:
            return df[df['Country'] == 'Indonesia'].reset_index(drop=True)
        return df[df['Country'] != 'Indonesia'].reset_index(drop=True)

    def group_by(self, df, old_column, new_column):
        """
        A method to make a DataFrame grouped by a column.
        
        Arguments:
         - df = a DataFrame from load_data method.
         - old_column = a column name from Stack Overflow
         - new_column = a column name generated by yourself (can be the same with old_column if you don't want to change)
        """
        df[old_column] = df[old_column].fillna('N/A')
        df = df.groupby(old_column).size().to_frame()
        df[new_column] = df.index
        df = df.reset_index(drop=True)
        df.rename(columns={0: 'count'}, inplace=True)
        df['count_percent'] = round(df['count'] / df['count'].sum(), 4)

        return df
    
    def transform(self, df, is_in, column, value):
        """
        A method to transform a grouped DataFrame from group_by method.
        
        Arguments:
         - df = a DataFrame from grouped_by method.
         - is_in = a list of columns you're interested to measure (e.g. ['a', 'b', 'c']).
         - value = string values that you're interested to measure (e.g. 'a, b, c').
        """
        group0 = {
            'count': df[~df[column].isin(is_in)]['count'].sum(),
            column: value
        }
        group0 = pd.DataFrame([group0])
        group1 = df[df[column].isin(is_in)]
        concat = pd.concat([group0, group1], sort=True)
        concat = concat.sort_values(by=column, ascending=True)
        concat['count_percent'] = round(concat['count'] / concat['count'].sum(), 4)
        concat = concat.reset_index(drop=True)
        
        return concat

    def make_numeric(
        self,
        df,
        old_column='Age1stCode',
        is_in =['Older than 85', 'Younger than 5 years'],
        new_column='age_first_code'
        
    ):
        """
        A method to create a vector from a numeric column.
        
        Arguments:
         - df = a DataFrame from load_data method.
         - old_column = column name from Stack Overflow dataset.
         - is_in  = a list of value that you're interested to measure (e.g. ['a', 'b', 'c']).
         - new_column = a column name generated by yourself (can be the same with old_column if you don't want to change)
        """
        df = df[~df[old_column].isin(is_in)]
        df = df[~df[old_column].isnull()]
        numeric = df[old_column].astype(int)
        numeric.name = new_column

        return numeric
    
class Visualization(Dataset):
    """
    Object initialization for data visualization. We will use an xkcd style plotting. It takes two arguments with default values, which are font_name (default = Comic Sans MS) and font_size (default = 16)
    """
    XKCD = plt.xkcd()
    
    def __init__(self, font_name='Comic Sans MS', font_size=16):
        self.font = {
            'fontname': font_name,
            'size': font_size
        }
        self.legend_font = font_manager.FontProperties(
            family=font_name,
            weight='bold',
            style='normal',
            size=font_size
        )
        
    def caption(self, df, column):
        """
        A method to generate a caption.
        
        Arguments:
         - df = a DataFrame that you're interested in from Dataset class.
         - column = a column name that you're interested in to visualize.
        """
        return ' \n'.join([f'{df.index[x]}: {df[column][x]}' for x in range(len(df))])
        
    def bar_chart(self, df_world, df_indonesia, column, caption_title, caption_x=0, caption_y=0):
        """
        A method to generate two side-by-side bar charts.
        
        Arguments:
         - df_world = a DataFrame from trasform method (not Indonesia).
         - df_indonesia = a DataFrame from transform method (Indonesia).
         - column = a column name that you're interested in to visualize.
         - caption_title = a caption text that is obtained from caption method.
         - caption_x (optional) = caption position horizontally speaking.
         - caption_y (optional) = caption position vertically speaking.
        """
        font = self.font
        legend_font = self.legend_font
        self.XKCD
        fig, ax = plt.subplots(figsize=(10, 5))
        bar_width = 0.35
        opacity = 0.9
        ax.bar(
            df_world.index,
            height='count_percent',
            width=0.35,
            data=df_world,
            alpha=opacity,
            color='black',
            label='World'
        )
        ax.bar(
            df_indonesia.index + bar_width,
            height='count_percent',
            width=0.35,
            data=df_indonesia,
            alpha=opacity,
            color='grey',
            label='Indonesia'
        )
        plt.title(f'Stackoverflow Developer Survey 2020: {caption_title}', **font)
        plt.xticks(df_world.index, **font)
        plt.yticks(**font)
        plt.text(caption_x, caption_y, self.caption(df_world, column))
        ax.legend(prop=legend_font)
        vals = ax.get_yticks()
        ax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])
        ax.legend()
        plt.show()
    
    def density_plot(
        self,
        density_world,
        density_indonesia,
        label_world,
        label_indonesia,
        suptitle,
        caption,
        kde_color='black',
        median_color='red',
        xmax=80
    ):
        """
        A method to generate a density plot for numeric values that can be obtained from make_numeric method.
        
        Arguments:
         - density_world = a vector (non Indonesian) generated from make_numeric method.
         - density_indonesia = a vector (Indonesian) generated from make_numeric method.
         - label_world = a graph label (non Indonesian).
         - label_indonesia = a graph label (Indonesian).
         - suptitle = a graph title.
         - caption = a graph caption.
         - kde_color (optional) = a graph color.
         - median_color (optional) = a vertical line color.
         - xmax (optional) = a maximum x-axis value.
        """
        fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))
        font = self.font
        sns.kdeplot(
            density_world,
            shade=True,
            color=kde_color,
            label=label_world,
            ax=ax[0]
        )
        sns.kdeplot(
            density_indonesia,
            shade=True,
            color=kde_color,
            label=label_indonesia,
            ax=ax[1]
        )
        ax[0].axvline(statistics.median(density_world), color=median_color)
        ax[1].axvline(statistics.median(density_indonesia), color=median_color)
        plt.xlim(0, xmax)
        fig.suptitle(suptitle, **font)
        fig.text(0.1, -0.01, caption, **font)
